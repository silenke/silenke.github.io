<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>在 VS Code 中使用 SSH</title>
    <url>/2020/03/14/vscode-ssh/</url>
    <content><![CDATA[<p>本文记录在 VS Code 中使用 SSH 连接远程服务的步骤。</p>
<a id="more"></a>

<hr>
<p>SSH 连接了客户端和服务端，默认使用 22 端口。</p>
<ul>
<li>客户端：Windows 10</li>
<li>服务端：Ubuntu 16.04</li>
</ul>
<h2 id="在服务端安装-SSH"><a href="#在服务端安装-SSH" class="headerlink" title="在服务端安装 SSH"></a>在服务端安装 SSH</h2><p>服务端必须有自己的 IP，我使用的是 Virtual Box 虚拟机，要先在设置里将网络模式改为桥接，然后重启系统。</p>
<p>查看 IP：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure>

<p>安装 ssh 服务并启动：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install openssh-server</span><br><span class="line">server sshd start</span><br></pre></td></tr></table></figure>

<p>设置开机自启动 ssh 服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable ssh</span><br></pre></td></tr></table></figure>

<h2 id="在客户端安装-SSH"><a href="#在客户端安装-SSH" class="headerlink" title="在客户端安装 SSH"></a>在客户端安装 SSH</h2><p>Windows 10 自带了 SSH 客户端，可以在 powershell 中输入以下命令，连接服务端：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh username@ipaddress</span><br></pre></td></tr></table></figure>

<h2 id="配置密钥"><a href="#配置密钥" class="headerlink" title="配置密钥"></a>配置密钥</h2><p>客户端需要将自己的公钥放在服务端。</p>
<p>在 powershell 中输入 <code>ssh-keygen</code>，会在 <code>C:\Users\username\.ssh</code> 目录下生成密钥。</p>
<ul>
<li><code>idrsa</code>：私钥</li>
<li><code>idrsa.pub</code>：公钥。</li>
</ul>
<p>公钥需要放在服务端的 <code>.ssh</code> 目录的 <code>authorized_keys</code> 文件中，必须设置权限：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 600 authorized_keys</span><br><span class="line">chmod 700 ~/.ssh</span><br></pre></td></tr></table></figure>
<p>然后将客户端 <code>idrsa.pub</code> 中的内容复制到 <code>authorized_keys</code> 中。</p>
<h2 id="设置-VS-Code"><a href="#设置-VS-Code" class="headerlink" title="设置 VS Code"></a>设置 VS Code</h2><p>在商店查找 <code>remote</code>，选择 <code>Remote Development</code> 和 <code>Remote SSH</code> 安装。</p>
<p>在左边的 <code>远程资源管理</code> 选择 <code>SSH Targets</code>，点击 <code>Configure</code>，选择第一个文件进行配置：</p>
<ul>
<li><code>Host</code>：服务端主机的名称（只在 Code 中使用，与服务端无关）</li>
<li><code>HostName</code>：服务端主机的 IP</li>
<li><code>User</code>：登录使用的用户名</li>
</ul>
<p>配置好后，点击 <code>Connect</code>，连接到服务端。</p>
]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL 的安装与使用</title>
    <url>/2020/02/08/install-wsl/</url>
    <content><![CDATA[<p>本文介绍如何在 Windows 中安装 WSL，并在 VS Code 中使用。</p>
<a id="more"></a>

<hr>
<p>CSAPP 建议使用 Linux 虚拟机来编译 C/C++ 程序，但是使用不太方便。还好微软推出了 WSL，在很多方面可以代替虚拟机。WSL 是 Windows 的 Linux 子系统，编译 C/C++ 程序比较方便，不用再去安装 MinGW 了。以下步骤主要来自 <a href="https://code.visualstudio.com/docs/cpp/config-wsl" target="_blank" rel="noopener">官网</a>，我额外增加了一些内容（踩了好多坑啊 T^T）。</p>
<h2 id="安装-WSL"><a href="#安装-WSL" class="headerlink" title="安装 WSL"></a>安装 WSL</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>右键开始菜单，打开 PowerShell（管理员）运行以下命令（可能需要重启）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/08/install-wsl/powershell.png" alt="powershell"></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在 Microsoft Store 中搜索 <code>Linux</code>，选择自己需要的版本安装，我选择的是 Ubuntu 16.04 LTS。</p>
<p><img src="/2020/02/08/install-wsl/store.png" alt="Microsoft Store"></p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>安装完成后，需要初始化。</p>
<p>在开始菜单找到 Ubuntu 并打开，按照提示创建用户。</p>
<p><img src="/2020/02/08/install-wsl/initial-ubuntu.png" alt="initial-ubuntu"></p>
<h3 id="更换软件源"><a href="#更换软件源" class="headerlink" title="更换软件源"></a>更换软件源</h3><p>Ubuntu 自带的源很慢，需要更换为国内的源。</p>
<p>在 Ubuntu 中输入以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/apt/    # 打开软件源存放位置</span><br><span class="line">sudo cp sources.list sources.list.backup # 备份</span><br><span class="line">sudo vim sources.list    # 用 vim 打开</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/08/install-wsl/change-source.png" alt="change-source"></p>
<p>使用 vim 编辑软件源：</p>
<ul>
<li>输入 <code>:%d</code> 清空文件</li>
<li>按 <code>esc</code> 键，然后输入 <code>i</code> 进入编辑模式</li>
<li>复制下面内容（阿里源）：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deb-src http://archive.ubuntu.com/ubuntu xenial main restricted #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/xenial main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/xenial main restricted multiverse universe #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/xenial-updates main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/xenial-updates main restricted multiverse universe #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/xenial universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/xenial-updates universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/xenial multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/xenial-updates multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/xenial-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/xenial-backports main restricted universe multiverse #Added by software-properties</span><br><span class="line">deb http://archive.canonical.com/ubuntu xenial partner</span><br><span class="line">deb-src http://archive.canonical.com/ubuntu xenial partner</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/xenial-security main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/xenial-security main restricted multiverse universe #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/xenial-security universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/xenial-security multiverse</span><br></pre></td></tr></table></figure></li>
<li>回到 vim，右键粘贴</li>
<li>按 <code>esc</code> 键，然后输入 <code>:wq</code> 保存并退出</li>
</ul>
<h3 id="安装-GNU-工具"><a href="#安装-GNU-工具" class="headerlink" title="安装 GNU 工具"></a>安装 GNU 工具</h3><p>更新软件列表：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/08/install-wsl/update-apt.png" alt="update-apt"></p>
<p>安装 GNU 工具（gcc，g++，gdb，make）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install build-essential gdb</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/08/install-wsl/install-gnu.png" alt="install-gnu"></p>
<h2 id="在-VS-Code-中使用"><a href="#在-VS-Code-中使用" class="headerlink" title="在 VS Code 中使用"></a>在 VS Code 中使用</h2><p>现在 WSL 就已经准备好了，我们可以在这里开发 C/C++ 程序，只是没有界面而已。为了使用有图形化界面的编辑器，还需要 VS Code。</p>
<h3 id="打开-VS-Code"><a href="#打开-VS-Code" class="headerlink" title="打开 VS Code"></a>打开 VS Code</h3><p>创建工作目录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir projects</span><br><span class="line">cd projects</span><br><span class="line">mkdir helloworld</span><br><span class="line">cd helloworld</span><br></pre></td></tr></table></figure>

<p>打开 VS Code：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">code .</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/08/install-wsl/make-dir.png" alt="make-dir"></p>
<p>现在就可以关闭 Ubuntu 了。当前工作目录是 helloworld，后面所有工作都是在这完成的。</p>
<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>在左侧的拓展菜单搜索 <code>WSL</code> 并安装。</p>
<p><img src="/2020/02/08/install-wsl/install-wsl-ext.png" alt="安装 WSL 插件"></p>
<p>同样，搜索 <code>C++</code>，选择第一个安装。</p>
<p><img src="/2020/02/08/install-wsl/install-cpp-ext.png" alt="安装 C++ 插件"></p>
<h3 id="下载代码"><a href="#下载代码" class="headerlink" title="下载代码"></a>下载代码</h3><p>CSAPP 中的代码可以从 <a href="http://csapp.cs.cmu.edu/3e/code.html" target="_blank" rel="noopener">官网</a> 获得。</p>
<p>找到下面的终端，这个就是刚才的 Ubuntu，现在可以在这里敲命令。</p>
<p><img src="/2020/02/08/install-wsl/open-bash.png" alt="打开终端"></p>
<p>在终端输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://csapp.cs.cmu.edu/3e/code-all.tar</span><br></pre></td></tr></table></figure>

<p>文件会下载到当前目录，然后解包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar xvf code-all.tar</span><br></pre></td></tr></table></figure>

<p>至此就可以使用了，在 VS Code 编辑代码，在终端编译调试。</p>
<p>注意：可以使用 VS Code 来帮助编译调试，<a href="https://code.visualstudio.com/docs/cpp/config-wsl#_build-helloworldcpp" target="_blank" rel="noopener">官网</a> 有详细介绍。</p>
<p><img src="/2020/02/08/install-wsl/start.png" alt="开始使用"></p>
]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>WSL</tag>
        <tag>VS Code</tag>
      </tags>
  </entry>
  <entry>
    <title>CS:APP3e 学习笔记</title>
    <url>/2020/02/08/learn-csapp-3e/</url>
    <content><![CDATA[<p>本文是 CS:APP3e 的学习笔记。</p>
<a id="more"></a>

<hr>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><p>本书基于 Linux 系统，如果计算机是 Windows 系统，建议 <a href="../install-wsl/">安装 WSL</a> 。</p>
<h3 id="配套课程"><a href="#配套课程" class="headerlink" title="配套课程"></a>配套课程</h3><p>本书是 <a href="https://scs.hosted.panopto.com/Panopto/Pages/Sessions/List.aspx#folderID=%22b96d90ae-9871-4fae-91e2-b1627b43e25e%22&sortColumn=1&sortAscending=true" target="_blank" rel="noopener">CMU 15-213</a> 的教材，该课程目前只有 2015 年的视频。</p>
<p><a href="https://www.bilibili.com/video/av31289365" target="_blank" rel="noopener">B站</a> 的视频有中文字幕，不过不全，可以从 <a href="https://www.youtube.com/watch?v=4CpHpFu_KYM&list=PL4YtNpAhVHFJVlaD203_8JkUOUT8RYUhY" target="_blank" rel="noopener">油管</a> 下载缺少的视频，然后手动添加 <a href="https://github.com/EugeneLiu/translationCSAPP" target="_blank" rel="noopener">字幕</a>。</p>
<p>Recitation 不用看，可以看看 <a href="http://www.cs.cmu.edu/afs/cs/academic/class/15213-f15/www/schedule.html" target="_blank" rel="noopener">PPT</a>。</p>
<p>视频顺序：</p>
<ul>
<li>Lecture 01: Course Overview</li>
<li>Lecture 02: Bits, Bytes, and Integers</li>
<li>Lecture 03: Bits, Bytes, and Integers (cont.)</li>
<li>Lecture 04: Floating Point<ul>
<li>Recitation 3: Datalab and Data Representations</li>
</ul>
</li>
<li>Lecture 05: Machine-Level Programming I: Basics</li>
<li>Lecture 06: Machine-Level Programming II: Control<ul>
<li>Recitation 4: Bomb Lab</li>
</ul>
</li>
<li>Lecture 07: Machine-Level Programming III: Procedures</li>
<li>Lecture 08: Machine-Level Programming IV: Data<ul>
<li>Recitation 5: Attack Lab and Stacks</li>
</ul>
</li>
<li>Lecture 09: Machine-Level Programming V: Advanced Topics</li>
<li>Lecture 10: Program Optimization<ul>
<li>Recitation 6: C Review</li>
</ul>
</li>
<li>Lecture 11: The Memory Hierarchy</li>
<li>Lecture 12: Cache Memories<ul>
<li>Recitation 7: Cache Lab and Blocking</li>
</ul>
</li>
<li>Lecture 13: Linking</li>
<li>Lecture 14: Exceptional Control Flow: Exceptions and Processes<ul>
<li>Recitation 8: Exam Review</li>
</ul>
</li>
<li>Lecture 15: Exceptional Control Flow: Signals and Nonlocal Jumps</li>
<li>Lecture 16: System Level I/O<ul>
<li>Recitation 9: Shell Lab, Processes, and Signals, and I/O</li>
</ul>
</li>
<li>Lecture 17: Virtual Memory: Concepts</li>
<li>Lecture 18: Virtual Memory: Systems<ul>
<li>Recitation 10: Virtual Memory</li>
</ul>
</li>
<li>Lecture 19: Dynamic Memory Allocation: Basic Concepts</li>
<li>Lecture 20: Dynamic Memory Allocation: Advanced Concepts<ul>
<li>Recitation 11: Malloc Lab</li>
</ul>
</li>
<li>Lecture 21: Network Programming: Part 1</li>
<li>Lecture 22: Network Programming: Part II<ul>
<li>Recitation 12: Debugging Malloc Lab</li>
</ul>
</li>
<li>Lecture 23: Concurrent Programming</li>
<li>Lecture 24: Synchronization: Basics<ul>
<li>Recitation 13: Proxy Lab</li>
</ul>
</li>
<li>Lecture 25: Synchronization: Advanced<ul>
<li>Recitation 14: Synchronization</li>
</ul>
</li>
<li>Lecture 26: Thread-Level Parallelism</li>
<li>Lecture 27: Future of Computing<ul>
<li>Recitation 15: Exam review</li>
</ul>
</li>
</ul>
<h3 id="学习方法"><a href="#学习方法" class="headerlink" title="学习方法"></a>学习方法</h3><p>每章阅读三次，然后做题。</p>
<h3 id="参考书"><a href="#参考书" class="headerlink" title="参考书"></a>参考书</h3><ul>
<li>The C Programming Language</li>
<li>The Linux Programming Interface</li>
</ul>
<h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><ul>
<li>Data Lab</li>
<li>Bomb Lab</li>
<li>Attack Lab</li>
<li>Architecture Lab</li>
<li>Cache Lab</li>
<li>Shell Lab</li>
<li>Malloc Lab</li>
<li>Proxy Lab</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>CSAPP</tag>
      </tags>
  </entry>
</search>
